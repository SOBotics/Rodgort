// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Rodgort.Data;

namespace Rodgort.Migrations
{
    [DbContext(typeof(RodgortContext))]
    [Migration("20181221020752_ReworkUserActions")]
    partial class ReworkUserActions
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Rodgort.Data.Tables.DbBurnakiFollow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BurnakiId");

                    b.Property<DateTime?>("FollowEnded");

                    b.Property<DateTime>("FollowStarted");

                    b.Property<int>("RoomId");

                    b.HasKey("Id");

                    b.ToTable("BurnakiFollows");
                });

            modelBuilder.Entity("Rodgort.Data.Tables.DbLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Callsite");

                    b.Property<string>("Exception");

                    b.Property<string>("Level");

                    b.Property<string>("Logger");

                    b.Property<string>("Message");

                    b.Property<DateTime>("TimeLogged");

                    b.HasKey("Id");

                    b.HasIndex("TimeLogged");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("Rodgort.Data.Tables.DbMetaAnswer", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Body");

                    b.Property<DateTime>("LastSeen");

                    b.Property<int>("MetaQuestionId");

                    b.HasKey("Id");

                    b.HasIndex("MetaQuestionId");

                    b.ToTable("MetaAnswers");
                });

            modelBuilder.Entity("Rodgort.Data.Tables.DbMetaAnswerStatistics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateTime");

                    b.Property<int>("MetaAnswerId");

                    b.Property<int>("Score");

                    b.HasKey("Id");

                    b.HasIndex("MetaAnswerId");

                    b.ToTable("MetaAnswerStatistics");
                });

            modelBuilder.Entity("Rodgort.Data.Tables.DbMetaQuestion", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Body");

                    b.Property<DateTime?>("BurnEnded");

                    b.Property<DateTime?>("BurnStarted");

                    b.Property<string>("CloseReason");

                    b.Property<DateTime?>("ClosedDate");

                    b.Property<DateTime?>("FeaturedEnded");

                    b.Property<DateTime?>("FeaturedStarted");

                    b.Property<DateTime>("LastSeen");

                    b.Property<string>("Link");

                    b.Property<int>("Score");

                    b.Property<string>("Title");

                    b.Property<int>("ViewCount");

                    b.HasKey("Id");

                    b.ToTable("MetaQuestions");
                });

            modelBuilder.Entity("Rodgort.Data.Tables.DbMetaQuestionMetaTag", b =>
                {
                    b.Property<int>("MetaQuestionId");

                    b.Property<string>("TagName");

                    b.HasKey("MetaQuestionId", "TagName");

                    b.HasIndex("TagName");

                    b.ToTable("MetaQuestionMetaTags");
                });

            modelBuilder.Entity("Rodgort.Data.Tables.DbMetaQuestionStatistics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateTime");

                    b.Property<int>("MetaQuestionId");

                    b.Property<int>("Score");

                    b.Property<int>("ViewCount");

                    b.HasKey("Id");

                    b.HasIndex("MetaQuestionId");

                    b.ToTable("MetaQuestionStatistics");
                });

            modelBuilder.Entity("Rodgort.Data.Tables.DbMetaQuestionTag", b =>
                {
                    b.Property<int>("MetaQuestionId");

                    b.Property<string>("TagName");

                    b.Property<int>("RequestTypeId");

                    b.Property<string>("SecondaryTagName");

                    b.Property<int>("StatusId");

                    b.HasKey("MetaQuestionId", "TagName");

                    b.HasIndex("RequestTypeId");

                    b.HasIndex("SecondaryTagName");

                    b.HasIndex("StatusId");

                    b.HasIndex("TagName");

                    b.ToTable("MetaQuestionTags");
                });

            modelBuilder.Entity("Rodgort.Data.Tables.DbMetaQuestionTagStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("MetaQuestionTagStatuses");

                    b.HasData(
                        new { Id = 1, Name = "Pending" },
                        new { Id = 2, Name = "Approved" },
                        new { Id = 3, Name = "Rejected" }
                    );
                });

            modelBuilder.Entity("Rodgort.Data.Tables.DbMetaTag", b =>
                {
                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd();

                    b.HasKey("Name");

                    b.ToTable("MetaTags");

                    b.HasData(
                        new { Name = "status-completed" },
                        new { Name = "status-planned" },
                        new { Name = "status-declined" },
                        new { Name = "featured" }
                    );
                });

            modelBuilder.Entity("Rodgort.Data.Tables.DbRequestType", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("RequestTypes");

                    b.HasData(
                        new { Id = 1, Name = "Unknown" },
                        new { Id = 2, Name = "Synonym" },
                        new { Id = 3, Name = "Merge" },
                        new { Id = 4, Name = "Burninate" }
                    );
                });

            modelBuilder.Entity("Rodgort.Data.Tables.DbSiteUser", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("DisplayName");

                    b.HasKey("Id");

                    b.ToTable("SiteUsers");
                });

            modelBuilder.Entity("Rodgort.Data.Tables.DbTag", b =>
                {
                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("NumberOfQuestions");

                    b.Property<string>("SynonymOfTagName");

                    b.HasKey("Name");

                    b.HasIndex("SynonymOfTagName");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Rodgort.Data.Tables.DbTagStatistics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AnswerCount");

                    b.Property<DateTime>("DateTime");

                    b.Property<int>("QuestionCount");

                    b.Property<string>("TagName");

                    b.HasKey("Id");

                    b.HasIndex("TagName");

                    b.ToTable("TagStatistics");
                });

            modelBuilder.Entity("Rodgort.Data.Tables.DbUserAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("PostId");

                    b.Property<int>("SiteUserId");

                    b.Property<string>("Tag");

                    b.Property<DateTime>("Time");

                    b.Property<int>("UserActionTypeId");

                    b.HasKey("Id");

                    b.HasIndex("SiteUserId");

                    b.HasIndex("UserActionTypeId");

                    b.ToTable("UserActions");
                });

            modelBuilder.Entity("Rodgort.Data.Tables.DbUserActionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("UserActionTypes");

                    b.HasData(
                        new { Id = 1, Name = "Removed Tag" },
                        new { Id = 2, Name = "Added Tag" },
                        new { Id = 3, Name = "Closed" },
                        new { Id = 4, Name = "Reopened" },
                        new { Id = 5, Name = "Deleted" },
                        new { Id = 6, Name = "Undeleted" }
                    );
                });

            modelBuilder.Entity("Rodgort.Data.Tables.DbMetaAnswer", b =>
                {
                    b.HasOne("Rodgort.Data.Tables.DbMetaQuestion", "MetaQuestion")
                        .WithMany("MetaAnswers")
                        .HasForeignKey("MetaQuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rodgort.Data.Tables.DbMetaAnswerStatistics", b =>
                {
                    b.HasOne("Rodgort.Data.Tables.DbMetaAnswer", "MetaAnswer")
                        .WithMany("Statistics")
                        .HasForeignKey("MetaAnswerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rodgort.Data.Tables.DbMetaQuestionMetaTag", b =>
                {
                    b.HasOne("Rodgort.Data.Tables.DbMetaQuestion", "MetaQuestion")
                        .WithMany("MetaQuestionMetaTags")
                        .HasForeignKey("MetaQuestionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rodgort.Data.Tables.DbMetaTag", "MetaTag")
                        .WithMany("MetaQuestionMetaTags")
                        .HasForeignKey("TagName")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rodgort.Data.Tables.DbMetaQuestionStatistics", b =>
                {
                    b.HasOne("Rodgort.Data.Tables.DbMetaQuestion", "MetaQuestion")
                        .WithMany("Statistics")
                        .HasForeignKey("MetaQuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rodgort.Data.Tables.DbMetaQuestionTag", b =>
                {
                    b.HasOne("Rodgort.Data.Tables.DbMetaQuestion", "MetaQuestion")
                        .WithMany("MetaQuestionTags")
                        .HasForeignKey("MetaQuestionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rodgort.Data.Tables.DbRequestType", "RequestType")
                        .WithMany("MetaQuestionTags")
                        .HasForeignKey("RequestTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rodgort.Data.Tables.DbTag", "SecondaryTag")
                        .WithMany("MetaQuestionSecondaryTags")
                        .HasForeignKey("SecondaryTagName");

                    b.HasOne("Rodgort.Data.Tables.DbMetaQuestionTagStatus", "Status")
                        .WithMany("MetaQuestionTags")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rodgort.Data.Tables.DbTag", "Tag")
                        .WithMany("MetaQuestionTags")
                        .HasForeignKey("TagName")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rodgort.Data.Tables.DbTag", b =>
                {
                    b.HasOne("Rodgort.Data.Tables.DbTag", "SynonymOf")
                        .WithMany("Synonyms")
                        .HasForeignKey("SynonymOfTagName");
                });

            modelBuilder.Entity("Rodgort.Data.Tables.DbTagStatistics", b =>
                {
                    b.HasOne("Rodgort.Data.Tables.DbTag", "Tag")
                        .WithMany("Statistics")
                        .HasForeignKey("TagName");
                });

            modelBuilder.Entity("Rodgort.Data.Tables.DbUserAction", b =>
                {
                    b.HasOne("Rodgort.Data.Tables.DbSiteUser", "SiteUser")
                        .WithMany("UserActions")
                        .HasForeignKey("SiteUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rodgort.Data.Tables.DbUserActionType", "UserActionType")
                        .WithMany("UserActions")
                        .HasForeignKey("UserActionTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
