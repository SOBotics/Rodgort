// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Rodgort.Data;

namespace Rodgort.Migrations
{
    [DbContext(typeof(RodgortContext))]
    [Migration("20181204062134_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Rodgort.Data.Tables.DbMetaAnswer", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Body");

                    b.Property<int>("MetaQuestionId");

                    b.HasKey("Id");

                    b.HasIndex("MetaQuestionId");

                    b.ToTable("DbMetaAnswer");
                });

            modelBuilder.Entity("Rodgort.Data.Tables.DbMetaAnswerStatistics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateTime");

                    b.Property<int>("MetaAnswerId");

                    b.Property<int>("Score");

                    b.HasKey("Id");

                    b.HasIndex("MetaAnswerId");

                    b.ToTable("DbMetaAnswerStatistics");
                });

            modelBuilder.Entity("Rodgort.Data.Tables.DbMetaQuestion", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Body");

                    b.Property<string>("Link");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("DbMetaQuestion");
                });

            modelBuilder.Entity("Rodgort.Data.Tables.DbMetaQuestionStatistics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateTime");

                    b.Property<int>("MetaQuestionId");

                    b.Property<int>("Score");

                    b.HasKey("Id");

                    b.HasIndex("MetaQuestionId");

                    b.ToTable("DbMetaQuestionStatistics");
                });

            modelBuilder.Entity("Rodgort.Data.Tables.DbMetaQuestionTag", b =>
                {
                    b.Property<int>("MetaQuestionId");

                    b.Property<string>("TagName");

                    b.Property<int>("RequestTypeId");

                    b.Property<string>("SecondaryTagName");

                    b.HasKey("MetaQuestionId", "TagName");

                    b.HasIndex("RequestTypeId");

                    b.HasIndex("SecondaryTagName");

                    b.HasIndex("TagName");

                    b.ToTable("DbMetaQuestionTag");
                });

            modelBuilder.Entity("Rodgort.Data.Tables.DbRequestType", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("DbRequestType");

                    b.HasData(
                        new { Id = 0, Name = "Unknown" },
                        new { Id = 1, Name = "Synonym" },
                        new { Id = 2, Name = "Merge" },
                        new { Id = 3, Name = "Burninate" }
                    );
                });

            modelBuilder.Entity("Rodgort.Data.Tables.DbTag", b =>
                {
                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd();

                    b.HasKey("Name");

                    b.ToTable("DbTag");
                });

            modelBuilder.Entity("Rodgort.Data.Tables.DbTagStatistics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AnswerCount");

                    b.Property<DateTime>("DateTime");

                    b.Property<int>("QuestionCount");

                    b.Property<string>("TagName");

                    b.HasKey("Id");

                    b.HasIndex("TagName");

                    b.ToTable("DbTagStatistics");
                });

            modelBuilder.Entity("Rodgort.Data.Tables.DbMetaAnswer", b =>
                {
                    b.HasOne("Rodgort.Data.Tables.DbMetaQuestion", "MetaQuestion")
                        .WithMany("MetaAnswers")
                        .HasForeignKey("MetaQuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rodgort.Data.Tables.DbMetaAnswerStatistics", b =>
                {
                    b.HasOne("Rodgort.Data.Tables.DbMetaAnswer", "MetaAnswer")
                        .WithMany("Statistics")
                        .HasForeignKey("MetaAnswerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rodgort.Data.Tables.DbMetaQuestionStatistics", b =>
                {
                    b.HasOne("Rodgort.Data.Tables.DbMetaQuestion", "MetaQuestion")
                        .WithMany("Statistics")
                        .HasForeignKey("MetaQuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rodgort.Data.Tables.DbMetaQuestionTag", b =>
                {
                    b.HasOne("Rodgort.Data.Tables.DbMetaQuestion", "MetaQuestion")
                        .WithMany("MetaQuestionTags")
                        .HasForeignKey("MetaQuestionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rodgort.Data.Tables.DbRequestType", "RequestType")
                        .WithMany("MetaQuestionTags")
                        .HasForeignKey("RequestTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rodgort.Data.Tables.DbTag", "SecondaryTag")
                        .WithMany("MetaQuestionSecondaryTags")
                        .HasForeignKey("SecondaryTagName");

                    b.HasOne("Rodgort.Data.Tables.DbTag", "Tag")
                        .WithMany("MetaQuestionTags")
                        .HasForeignKey("TagName")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rodgort.Data.Tables.DbTagStatistics", b =>
                {
                    b.HasOne("Rodgort.Data.Tables.DbTag", "Tag")
                        .WithMany("Statistics")
                        .HasForeignKey("TagName");
                });
#pragma warning restore 612, 618
        }
    }
}
